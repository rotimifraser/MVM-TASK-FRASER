{
	"info": {
		"_postman_id": "41eef38a-f470-4555-ba97-06357d304ff5",
		"name": "MVM Breach Test API",
		"description": "API documentation for the demo breach server for testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3549347"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "auth",
					"item": [
						{
							"name": "register",
							"item": [
								{
									"name": "Bad request (password)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {",
													"    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';",
													"    let result = '';",
													"    for (let i = 0; i < length; i++) {",
													"        result += characters.charAt(Math.floor(Math.random() * characters.length));",
													"    }",
													"    return result;",
													"}",
													"",
													"// Generate a unique email with timestamp and random string",
													"const timestamp = new Date().getTime();",
													"const randomString = generateRandomString(5);",
													"const uniqueEmail = `test.${randomString}.${timestamp}@example.com`;",
													"",
													"// Save the email to an environment variable",
													"pm.collectionVariables.set(\"uniqueEmail\", uniqueEmail);",
													"console.log(`Generated unique email: ${uniqueEmail}`);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Test for expected content type",
													"pm.test(\"Content-Type header is application/json\", function() {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"const responseBody = pm.response.json();",
													"",
													"// Test that response body contains message and it's not empty",
													"pm.test(\"Response contains message\", function() {",
													"    pm.expect(responseBody).to.have.property(\"message\");",
													"    pm.expect(responseBody.message).to.not.be.null;",
													"    pm.expect(responseBody.message).to.not.be.undefined;",
													"    pm.expect(responseBody.message.toLowerCase()).to.include('email or password not provided');",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{uniqueEmail}}\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"register"
											]
										},
										"description": "Create a new account and get a jwt token to access protected services"
									},
									"response": [
										{
											"name": "Successful response with token object",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\",\n  \"userId\": \"<integer>\"\n}"
										},
										{
											"name": "Request could not be validated",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Entity was not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										}
									]
								},
								{
									"name": "Bad request (email)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {",
													"    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';",
													"    let result = '';",
													"    for (let i = 0; i < length; i++) {",
													"        result += characters.charAt(Math.floor(Math.random() * characters.length));",
													"    }",
													"    return result;",
													"}",
													"",
													"// Generate a unique email with timestamp and random string",
													"const timestamp = new Date().getTime();",
													"const randomString = generateRandomString(5);",
													"const uniqueEmail = `test.${randomString}.${timestamp}@example.com`;",
													"",
													"// Save the email to an environment variable",
													"pm.collectionVariables.set(\"uniqueEmail\", uniqueEmail);",
													"console.log(`Generated unique email: ${uniqueEmail}`);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400 Bad Request\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Test for expected content type",
													"pm.test(\"Content-Type header is application/json\", function() {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"const responseBody = pm.response.json();",
													"",
													"// Test that response body contains message and it's not empty",
													"pm.test(\"Response contains proper message\", function() {",
													"    pm.expect(responseBody).to.have.property(\"message\");",
													"    pm.expect(responseBody.message).to.not.be.null;",
													"    pm.expect(responseBody.message).to.not.be.undefined;",
													"    pm.expect(responseBody.message.toLowerCase()).to.include('email or password not provided');",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"{{uniqueEmail}}\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"register"
											]
										},
										"description": "Create a new account and get a jwt token to access protected services"
									},
									"response": [
										{
											"name": "Successful response with token object",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\",\n  \"userId\": \"<integer>\"\n}"
										},
										{
											"name": "Request could not be validated",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Entity was not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										}
									]
								},
								{
									"name": "Bad request (empty fields)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {",
													"    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';",
													"    let result = '';",
													"    for (let i = 0; i < length; i++) {",
													"        result += characters.charAt(Math.floor(Math.random() * characters.length));",
													"    }",
													"    return result;",
													"}",
													"",
													"// Generate a unique email with timestamp and random string",
													"const timestamp = new Date().getTime();",
													"const randomString = generateRandomString(5);",
													"const uniqueEmail = `test.${randomString}.${timestamp}@example.com`;",
													"",
													"// Save the email to an environment variable",
													"pm.collectionVariables.set(\"uniqueEmail\", uniqueEmail);",
													"console.log(`Generated unique email: ${uniqueEmail}`);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400 Bad Request\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Test for expected content type",
													"pm.test(\"Content-Type header is application/json\", function() {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"const responseBody = pm.response.json();",
													"",
													"// Test that response body contains message and it's not empty",
													"pm.test(\"Response contains proper message\", function() {",
													"    pm.expect(responseBody).to.have.property(\"message\");",
													"    pm.expect(responseBody.message).to.not.be.null;",
													"    pm.expect(responseBody.message).to.not.be.undefined;",
													"    pm.expect(responseBody.message.toLowerCase()).to.include('email or password not provided');",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"\",\n  \"password\": \"\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"register"
											]
										},
										"description": "Create a new account and get a jwt token to access protected services"
									},
									"response": [
										{
											"name": "Successful response with token object",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\",\n  \"userId\": \"<integer>\"\n}"
										},
										{
											"name": "Request could not be validated",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Entity was not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										}
									]
								},
								{
									"name": "Bad request (invalid data)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {",
													"    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';",
													"    let result = '';",
													"    for (let i = 0; i < length; i++) {",
													"        result += characters.charAt(Math.floor(Math.random() * characters.length));",
													"    }",
													"    return result;",
													"}",
													"",
													"// Generate a unique email with timestamp and random string",
													"const timestamp = new Date().getTime();",
													"const randomString = generateRandomString(5);",
													"const uniqueEmail = `test.${randomString}.${timestamp}@example.com`;",
													"",
													"// Save the email to an environment variable",
													"pm.collectionVariables.set(\"uniqueEmail\", uniqueEmail);",
													"console.log(`Generated unique email: ${uniqueEmail}`);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400 Bad Request\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Test for expected content type",
													"pm.test(\"Content-Type header is application/json\", function() {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"const responseBody = pm.response.json();",
													"",
													"// Test that response body contains message and it's not empty",
													"pm.test(\"Response contains proper message\", function() {",
													"    pm.expect(responseBody).to.have.property(\"message\");",
													"    pm.expect(responseBody.message).to.not.be.null;",
													"    pm.expect(responseBody.message).to.not.be.undefined;",
													"    pm.expect(responseBody.message.toLowerCase()).to.include('provided email is not valid');",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"notanemail\",\n  \"password\": \"Password1!\"\n}\n",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"register"
											]
										},
										"description": "Create a new account and get a jwt token to access protected services"
									},
									"response": [
										{
											"name": "Successful response with token object",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\",\n  \"userId\": \"<integer>\"\n}"
										},
										{
											"name": "Request could not be validated",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Entity was not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										}
									]
								},
								{
									"name": "Bad request (sql injection)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {",
													"    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';",
													"    let result = '';",
													"    for (let i = 0; i < length; i++) {",
													"        result += characters.charAt(Math.floor(Math.random() * characters.length));",
													"    }",
													"    return result;",
													"}",
													"",
													"// Generate a unique email with timestamp and random string",
													"const timestamp = new Date().getTime();",
													"const randomString = generateRandomString(5);",
													"const uniqueEmail = `test.${randomString}.${timestamp}@example.com`;",
													"",
													"// Save the email to an environment variable",
													"pm.collectionVariables.set(\"uniqueEmail\", uniqueEmail);",
													"console.log(`Generated unique email: ${uniqueEmail}`);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400 Bad Request\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Test for expected content type",
													"pm.test(\"Content-Type header is application/json\", function() {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"const responseBody = pm.response.json();",
													"",
													"// Test that response body contains message and it's not empty",
													"pm.test(\"Response contains proper message\", function() {",
													"    pm.expect(responseBody).to.have.property(\"message\");",
													"    pm.expect(responseBody.message).to.not.be.null;",
													"    pm.expect(responseBody.message).to.not.be.undefined;",
													"    pm.expect(responseBody.message.toLowerCase()).to.include('provided email is not valid');",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"' OR 1=1--@example.com\",\n  \"password\": \"Password1!\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"register"
											]
										},
										"description": "Create a new account and get a jwt token to access protected services"
									},
									"response": [
										{
											"name": "Successful response with token object",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\",\n  \"userId\": \"<integer>\"\n}"
										},
										{
											"name": "Request could not be validated",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Entity was not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										}
									]
								},
								{
									"name": "Bad request (weak password)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {",
													"    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';",
													"    let result = '';",
													"    for (let i = 0; i < length; i++) {",
													"        result += characters.charAt(Math.floor(Math.random() * characters.length));",
													"    }",
													"    return result;",
													"}",
													"",
													"// Generate a unique email with timestamp and random string",
													"const timestamp = new Date().getTime();",
													"const randomString = generateRandomString(5);",
													"const uniqueEmail = `test.${randomString}.${timestamp}@example.com`;",
													"",
													"// Save the email to an environment variable",
													"pm.collectionVariables.set(\"uniqueEmail\", uniqueEmail);",
													"console.log(`Generated unique email: ${uniqueEmail}`);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400 Bad Request because password is too weak\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Test for expected content type",
													"pm.test(\"Content-Type header is application/json\", function() {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"const responseBody = pm.response.json();",
													"",
													"// Test that response body contains message and it's not empty",
													"pm.test(\"Response contains proper message\", function() {",
													"    pm.expect(responseBody).to.have.property(\"message\");",
													"    pm.expect(responseBody.message).to.not.be.null;",
													"    pm.expect(responseBody.message).to.not.be.undefined;",
													"    pm.expect(responseBody.message.toLowerCase()).to.include('email or password not provided');",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"123\"\n}\n",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"register"
											]
										},
										"description": "Create a new account and get a jwt token to access protected services"
									},
									"response": [
										{
											"name": "Successful response with token object",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\",\n  \"userId\": \"<integer>\"\n}"
										},
										{
											"name": "Request could not be validated",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Entity was not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										}
									]
								},
								{
									"name": "Bad request (duplicate email)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {",
													"    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';",
													"    let result = '';",
													"    for (let i = 0; i < length; i++) {",
													"        result += characters.charAt(Math.floor(Math.random() * characters.length));",
													"    }",
													"    return result;",
													"}",
													"",
													"// Generate a unique email with timestamp and random string",
													"const timestamp = new Date().getTime();",
													"const randomString = generateRandomString(5);",
													"const uniqueEmail = `test.${randomString}.${timestamp}@example.com`;",
													"",
													"pm.collectionVariables.set(\"usedEmail\", 'test@example.com');",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409 Bad email is used\", function() {",
													"    pm.response.to.have.status(409);",
													"});",
													"",
													"// Test for expected content type",
													"pm.test(\"Content-Type header is application/json\", function() {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"const responseBody = pm.response.json();",
													"",
													"// Test that response body contains message and it's not empty",
													"pm.test(\"Response contains proper message\", function() {",
													"    pm.expect(responseBody).to.have.property(\"message\");",
													"    pm.expect(responseBody.message).to.not.be.null;",
													"    pm.expect(responseBody.message).to.not.be.undefined;",
													"    pm.expect(responseBody.message.toLowerCase()).to.include('user with email already exists');",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{usedEmail}}\",\n  \"password\": \"123kjnfr30!\"\n}\n",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"register"
											]
										},
										"description": "Create a new account and get a jwt token to access protected services"
									},
									"response": [
										{
											"name": "Successful response with token object",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\",\n  \"userId\": \"<integer>\"\n}"
										},
										{
											"name": "Request could not be validated",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Entity was not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										}
									]
								},
								{
									"name": "201 Create a new account",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {",
													"    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';",
													"    let result = '';",
													"    for (let i = 0; i < length; i++) {",
													"        result += characters.charAt(Math.floor(Math.random() * characters.length));",
													"    }",
													"    return result;",
													"}",
													"",
													"// Generate a unique email with timestamp and random string",
													"const timestamp = new Date().getTime();",
													"const randomString = generateRandomString(5);",
													"const uniqueEmail = `test.${randomString}.${timestamp}@example.com`;",
													"",
													"// Save the email to an environment variable",
													"pm.collectionVariables.set(\"uniqueEmail\", uniqueEmail);",
													"console.log(`Generated unique email: ${uniqueEmail}`);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 Created\", function() {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"// Test for expected content type",
													"pm.test(\"Content-Type header is application/json\", function() {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"const responseBody = pm.response.json();",
													"",
													"// Test that response body contains token and it's not empty",
													"pm.test(\"Response contains non-empty token\", function() {",
													"    pm.expect(responseBody).to.have.property(\"token\");",
													"    pm.expect(responseBody.token).to.be.a(\"string\");",
													"    pm.expect(responseBody.token.trim().length).to.be.greaterThan(0);",
													"});",
													"",
													"// Test that response body contains userId and it's not empty",
													"pm.test(\"Response contains non-empty userId\", function() {",
													"    pm.expect(responseBody).to.have.property(\"userId\");",
													"    pm.expect(responseBody.userId).to.not.be.null;",
													"    pm.expect(responseBody.userId).to.not.be.undefined;",
													"});",
													"",
													"pm.collectionVariables.set(\"email\", pm.collectionVariables.get(\"uniqueEmail\"));",
													"pm.collectionVariables.set(\"password\", '12wer)');",
													"pm.collectionVariables.set(\"userId\", responseBody.userId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"12wer)\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"register"
											]
										},
										"description": "Create a new account and get a jwt token to access protected services"
									},
									"response": [
										{
											"name": "Successful response with token object",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\",\n  \"userId\": \"<integer>\"\n}"
										},
										{
											"name": "Request could not be validated",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Entity was not found",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/register",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"register"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										}
									]
								}
							]
						},
						{
							"name": "login",
							"item": [
								{
									"name": "Bad Request - invalid data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400 Bad Request\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Test for expected content type",
													"pm.test(\"Content-Type header is application/json\", function() {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"const responseBody = pm.response.json();",
													"",
													"// Test that response body contains message and it's not empty",
													"pm.test(\"Response contains proper message\", function() {",
													"    pm.expect(responseBody).to.have.property(\"message\");",
													"    pm.expect(responseBody.message).to.not.be.null;",
													"    pm.expect(responseBody.message).to.not.be.undefined;",
													"    pm.expect(responseBody.message.toLowerCase()).to.include('provided email is not valid');",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"notanemail\",\n  \"password\": \"Password1!\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										},
										"description": "Login and get a jwt token to access protected services"
									},
									"response": [
										{
											"name": "Successful response with token object",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\",\n  \"userId\": \"<integer>\"\n}"
										},
										{
											"name": "Request could not be validated",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Entity already exists while user tries to create it",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										}
									]
								},
								{
									"name": "Bad Request  - unregistered user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404 not found\", function() {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"// Test for expected content type",
													"pm.test(\"Content-Type header is application/json\", function() {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"const responseBody = pm.response.json();",
													"",
													"// Test that response body contains message and it's not empty",
													"pm.test(\"Response contains proper message\", function() {",
													"    pm.expect(responseBody).to.have.property(\"message\");",
													"    pm.expect(responseBody.message).to.not.be.null;",
													"    pm.expect(responseBody.message).to.not.be.undefined;",
													"    pm.expect(responseBody.message.toLowerCase()).to.include('user not found');",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"unregistered@example.com\",\n  \"password\": \"Password1!\"\n}\n",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										},
										"description": "Login and get a jwt token to access protected services"
									},
									"response": [
										{
											"name": "Successful response with token object",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\",\n  \"userId\": \"<integer>\"\n}"
										},
										{
											"name": "Request could not be validated",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Entity already exists while user tries to create it",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										}
									]
								},
								{
									"name": "Bad Request  - wrong password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404 not found\", function() {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"// Test for expected content type",
													"pm.test(\"Content-Type header is application/json\", function() {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"const responseBody = pm.response.json();",
													"",
													"// Test that response body contains message and it's not empty",
													"pm.test(\"Response contains proper message\", function() {",
													"    pm.expect(responseBody).to.have.property(\"message\");",
													"    pm.expect(responseBody.message).to.not.be.null;",
													"    pm.expect(responseBody.message).to.not.be.undefined;",
													"    pm.expect(responseBody.message.toLowerCase()).to.include('user not found');",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"Password1!\"\n}\n",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										},
										"description": "Login and get a jwt token to access protected services"
									},
									"response": [
										{
											"name": "Successful response with token object",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\",\n  \"userId\": \"<integer>\"\n}"
										},
										{
											"name": "Request could not be validated",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Entity already exists while user tries to create it",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										}
									]
								},
								{
									"name": "Bad Request - no data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Test for expected content type",
													"pm.test(\"Content-Type header is application/json\", function() {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"const responseBody = pm.response.json();",
													"",
													"// Test that response body contains message and it's not empty",
													"pm.test(\"Response contains proper message\", function() {",
													"    pm.expect(responseBody).to.have.property(\"message\");",
													"    pm.expect(responseBody.message).to.not.be.null;",
													"    pm.expect(responseBody.message).to.not.be.undefined;",
													"    pm.expect(responseBody.message.toLowerCase()).to.include('email or password not provided');",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"\",\n  \"password\": \"\"\n}\n",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										},
										"description": "Login and get a jwt token to access protected services"
									},
									"response": [
										{
											"name": "Successful response with token object",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\",\n  \"userId\": \"<integer>\"\n}"
										},
										{
											"name": "Request could not be validated",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Entity already exists while user tries to create it",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										}
									]
								},
								{
									"name": "sql injection",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Test for expected content type",
													"pm.test(\"Content-Type header is application/json\", function() {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"const responseBody = pm.response.json();",
													"",
													"// Test that response body contains message and it's not empty",
													"pm.test(\"Response contains proper message\", function() {",
													"    pm.expect(responseBody).to.have.property(\"message\");",
													"    pm.expect(responseBody.message).to.not.be.null;",
													"    pm.expect(responseBody.message).to.not.be.undefined;",
													"    pm.expect(responseBody.message.toLowerCase()).to.include('provided email is not valid');",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"' OR '1'='1@example.com\",\n  \"password\": \"anything\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										},
										"description": "Login and get a jwt token to access protected services"
									},
									"response": [
										{
											"name": "Successful response with token object",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\",\n  \"userId\": \"<integer>\"\n}"
										},
										{
											"name": "Request could not be validated",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Entity already exists while user tries to create it",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										}
									]
								},
								{
									"name": "200 Login into existing account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"",
													"pm.test(\"Response contains token and userId\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"token\");",
													"    pm.expect(jsonData).to.have.property(\"userId\");",
													"    pm.collectionVariables.get(\"userId\")",
													"});",
													"",
													"pm.test(\"Token is valid JWT format\", function () {",
													"    var token = pm.response.json().token;",
													"    pm.expect(token).to.match(/^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$/);",
													"});",
													"",
													"pm.collectionVariables.set(\"token\", jsonData.token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/auth/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"auth",
												"login"
											]
										},
										"description": "Login and get a jwt token to access protected services"
									},
									"response": [
										{
											"name": "Successful response with token object",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"token\": \"<string>\",\n  \"userId\": \"<integer>\"\n}"
										},
										{
											"name": "Request could not be validated",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Entity already exists while user tries to create it",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/auth/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"auth",
														"login"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "blog",
					"item": [
						{
							"name": "categories",
							"item": [
								{
									"name": "Content categories to filter by",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const expectedCategories = [",
													"    { id: 1, name: \"Humor\" },",
													"    { id: 2, name: \"Lifehacks\" },",
													"    { id: 3, name: \"Crypto\" },",
													"    { id: 4, name: \"Art\" },",
													"    { id: 5, name: \"Travel\" },",
													"    { id: 6, name: \"Sports\" },",
													"    { id: 7, name: \"Photography\" },",
													"    { id: 8, name: \"Food & drink\" },",
													"    { id: 9, name: \"History\" },",
													"    { id: 10, name: \"Science\" },",
													"    { id: 11, name: \"News\" },",
													"    { id: 12, name: \"Business & Finance\" },",
													"    { id: 13, name: \"Music\" },",
													"    { id: 14, name: \"Tech\" },",
													"    { id: 15, name: \"Faith & Spirituality\" },",
													"    { id: 16, name: \"Fashion & Beauty\" },",
													"    { id: 17, name: \"Nature\" },",
													"    { id: 18, name: \"General\" },",
													"    { id: 19, name: \"Health & Fitness\" },",
													"    { id: 20, name: \"Entertainment\" },",
													"    { id: 21, name: \"Gaming & Defi\" },",
													"    { id: 22, name: \"Education\" },",
													"    { id: 23, name: \"Politics & Activism\" },",
													"    { id: 24, name: \"Art & Illustration\" },",
													"    { id: 25, name: \"World Economics\" },",
													"    { id: 26, name: \"Demystifying the crypto-world\" }",
													"];",
													"",
													"const responseCategories = pm.response.json();",
													"",
													"// Test 1: Check status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// Test 2: Check total count",
													"pm.test(\"Should return exactly 26 categories\", function () {",
													"    pm.expect(responseCategories.length).to.eql(26);",
													"});",
													"",
													"// Test 3: Check all expected categories are present",
													"pm.test(\"All expected categories are present\", function () {",
													"    expectedCategories.forEach(expected => {",
													"        const found = responseCategories.find(cat => cat.id === expected.id && cat.name === expected.name);",
													"        pm.expect(found, `Missing category: ID ${expected.id}, Name \"${expected.name}\"`).to.not.be.undefined;",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/blog/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"blog",
												"categories"
											]
										},
										"description": "Content categories to filter by"
									},
									"response": [
										{
											"name": "Successful response with category objects",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/blog/categories",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"categories"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"icon\": \"<string>\"\n  },\n  {\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"icon\": \"<string>\"\n  }\n]"
										},
										{
											"name": "Request could not be validated",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/blog/categories",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"categories"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/blog/categories",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"categories"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										}
									]
								}
							]
						},
						{
							"name": "posts",
							"item": [
								{
									"name": "Blog posts filtered by category",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let currentId = pm.collectionVariables.get(\"categoryId\") || 1;",
													"pm.collectionVariables.set(\"categoryId\", currentId);",
													"console.log(\"Request Name: \" + pm.info.requestName);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const posts = pm.response.json();",
													"",
													"pm.test(\"Response is an array\", function () {",
													"    pm.expect(posts).to.be.an(\"array\");",
													"});",
													"",
													"if (posts.length > 0) {",
													"    posts.forEach((post, index) => {",
													"        pm.test(`Post ${index + 1} has correct schema`, function () {",
													"            pm.expect(post).to.have.property(\"id\").that.is.a(\"number\");",
													"            pm.expect(post).to.have.property(\"title\").that.is.a(\"string\");",
													"            pm.expect(post).to.have.property(\"content\").that.is.a(\"string\");",
													"            pm.expect(post).to.have.property(\"imageUrl\").that.is.a(\"string\");",
													"            pm.expect(post).to.have.property(\"createdAt\").that.is.a(\"string\");",
													"",
													"            pm.expect(post).to.have.property(\"author\").that.is.an(\"object\");",
													"            pm.expect(post.author).to.have.property(\"id\").that.is.a(\"number\");",
													"            pm.expect(post.author).to.have.property(\"name\").that.is.a(\"string\");",
													"",
													"            pm.expect(post).to.have.property(\"category\").that.is.an(\"object\");",
													"            pm.expect(post.category).to.have.property(\"id\").that.is.a(\"number\");",
													"            pm.expect(post.category).to.have.property(\"name\").that.is.a(\"string\");",
													"            pm.expect(post.category).to.have.property(\"icon\").that.is.a(\"string\");",
													"",
													"            pm.expect(post).to.have.property(\"series\").that.is.an(\"object\");",
													"            pm.expect(post.series).to.have.property(\"id\").that.is.a(\"number\");",
													"            pm.expect(post.series).to.have.property(\"name\").that.is.a(\"string\");",
													"        });",
													"    });",
													"} else {",
													"    console.log(`No posts found for categoryId=${pm.variables.get(\"categoryId\")}`);",
													"}",
													"",
													"// Set up for next iteration",
													"let nextId = parseInt(pm.variables.get(\"categoryId\")) + 1;",
													"if (nextId <= 26) {",
													"    pm.execution.setNextRequest(\"Blog posts filtered by category\");",
													"    pm.collectionVariables.set(\"categoryId\", nextId);",
													"} else {",
													"    pm.execution.setNextRequest(\"Bad Request - category does not exist\");}",
													"",
													"    console.clear;",
													"    console.log(pm.collectionVariables.get('categoryId'));",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/blog/posts?categoryId={{categoryId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"blog",
												"posts"
											],
											"query": [
												{
													"key": "categoryId",
													"value": "{{categoryId}}",
													"description": "Id of a category"
												}
											]
										},
										"description": "Blog posts filtered by category"
									},
									"response": [
										{
											"name": "Successful response with post objects",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/blog/posts?categoryId=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"posts"
													],
													"query": [
														{
															"key": "categoryId",
															"value": "<integer>",
															"description": "Id of a category"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"content\": \"<string>\",\n    \"imageUrl\": \"<string>\",\n    \"author\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\"\n    },\n    \"createdAt\": \"<date>\",\n    \"category\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"icon\": \"<string>\"\n    },\n    \"series\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\"\n    }\n  },\n  {\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"content\": \"<string>\",\n    \"imageUrl\": \"<string>\",\n    \"author\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\"\n    },\n    \"createdAt\": \"<date>\",\n    \"category\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"icon\": \"<string>\"\n    },\n    \"series\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\"\n    }\n  }\n]"
										},
										{
											"name": "Request could not be validated",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/blog/posts?categoryId=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"posts"
													],
													"query": [
														{
															"key": "categoryId",
															"value": "<integer>",
															"description": "Id of a category"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/blog/posts?categoryId=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"posts"
													],
													"query": [
														{
															"key": "categoryId",
															"value": "<integer>",
															"description": "Id of a category"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										}
									]
								},
								{
									"name": "Bad Request - category does not exist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404 not found\", function() {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"// Test for expected content type",
													"pm.test(\"Content-Type header is application/json\", function() {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"const responseBody = pm.response.json();",
													"",
													"// Test that response body contains message and it's not empty",
													"pm.test(\"Response contains proper message\", function() {",
													"    pm.expect(responseBody).to.have.property(\"message\");",
													"    pm.expect(responseBody.message).to.not.be.null;",
													"    pm.expect(responseBody.message).to.not.be.undefined;",
													"    pm.expect(responseBody.message.toLowerCase()).to.include('CATEGORY not found');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/blog/posts?categoryId=9000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"blog",
												"posts"
											],
											"query": [
												{
													"key": "categoryId",
													"value": "9000",
													"description": "Id of a category"
												}
											]
										},
										"description": "Blog posts filtered by category"
									},
									"response": [
										{
											"name": "Successful response with post objects",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/blog/posts?categoryId=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"posts"
													],
													"query": [
														{
															"key": "categoryId",
															"value": "<integer>",
															"description": "Id of a category"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"content\": \"<string>\",\n    \"imageUrl\": \"<string>\",\n    \"author\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\"\n    },\n    \"createdAt\": \"<date>\",\n    \"category\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"icon\": \"<string>\"\n    },\n    \"series\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\"\n    }\n  },\n  {\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"content\": \"<string>\",\n    \"imageUrl\": \"<string>\",\n    \"author\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\"\n    },\n    \"createdAt\": \"<date>\",\n    \"category\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"icon\": \"<string>\"\n    },\n    \"series\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\"\n    }\n  }\n]"
										},
										{
											"name": "Request could not be validated",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/blog/posts?categoryId=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"posts"
													],
													"query": [
														{
															"key": "categoryId",
															"value": "<integer>",
															"description": "Id of a category"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/blog/posts?categoryId=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"posts"
													],
													"query": [
														{
															"key": "categoryId",
															"value": "<integer>",
															"description": "Id of a category"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										}
									]
								},
								{
									"name": "Bad Request - INVALID category FORMAT",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status 404 not found\", function() {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"// Test for expected content type",
													"pm.test(\"Content-Type header is application/json\", function() {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"const responseBody = pm.response.json();",
													"",
													"// Test that response body contains message and it's not empty",
													"pm.test(\"Response contains proper message\", function() {",
													"    pm.expect(responseBody).to.have.property(\"message\");",
													"    pm.expect(responseBody.message).to.not.be.null;",
													"    pm.expect(responseBody.message).to.not.be.undefined;",
													"    pm.expect(responseBody.message.toLowerCase()).to.include('Bad Request - INVALID category FORMAT');",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/blog/posts?categoryId=,dmf *4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"blog",
												"posts"
											],
											"query": [
												{
													"key": "categoryId",
													"value": ",dmf *4",
													"description": "Id of a category"
												}
											]
										},
										"description": "Blog posts filtered by category"
									},
									"response": [
										{
											"name": "Successful response with post objects",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/blog/posts?categoryId=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"posts"
													],
													"query": [
														{
															"key": "categoryId",
															"value": "<integer>",
															"description": "Id of a category"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"content\": \"<string>\",\n    \"imageUrl\": \"<string>\",\n    \"author\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\"\n    },\n    \"createdAt\": \"<date>\",\n    \"category\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"icon\": \"<string>\"\n    },\n    \"series\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\"\n    }\n  },\n  {\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"content\": \"<string>\",\n    \"imageUrl\": \"<string>\",\n    \"author\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\"\n    },\n    \"createdAt\": \"<date>\",\n    \"category\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"icon\": \"<string>\"\n    },\n    \"series\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\"\n    }\n  }\n]"
										},
										{
											"name": "Request could not be validated",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/blog/posts?categoryId=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"posts"
													],
													"query": [
														{
															"key": "categoryId",
															"value": "<integer>",
															"description": "Id of a category"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/blog/posts?categoryId=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"blog",
														"posts"
													],
													"query": [
														{
															"key": "categoryId",
															"value": "<integer>",
															"description": "Id of a category"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "users",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "interests",
									"item": [
										{
											"name": "Save user's content category preferences",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log(\"Request Name: \" + pm.info.requestName);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status 201\", function() {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"console.log(\"i saved \" + pm.collectionVariables.get('categoryId'));"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"interests\": [\n    {{categoryId}}\n  ]\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/:id/interests",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														":id",
														"interests"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{userId}}",
															"description": "(Required) User id in path"
														}
													]
												},
												"description": "Save user's content category preferences"
											},
											"response": [
												{
													"name": "Successful request with no content",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"interests\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/users/:id/interests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":id",
																"interests"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Request could not be validated",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"interests\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/users/:id/interests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":id",
																"interests"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
												},
												{
													"name": "Client is not authorized to make request",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"interests\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/users/:id/interests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":id",
																"interests"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
												},
												{
													"name": "Client is forbidden from making this request",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"interests\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/users/:id/interests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":id",
																"interests"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
												},
												{
													"name": "Internal Server Error",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"interests\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/users/:id/interests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":id",
																"interests"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
												}
											]
										},
										{
											"name": "User interests defined by categories",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const data = pm.response.json();",
															"const targetId = Number(pm.collectionVariables.get('categoryId'));",
															"",
															"var ids = data.map(item => item.category.id);",
															"",
															"pm.test(`ID ${targetId} exists in the response`, function () {",
															"    pm.expect(ids).to.include(targetId);",
															"});",
															"",
															"",
															"console.log(\"i am looking for \" + targetId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/users/:id/interests",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														":id",
														"interests"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{userId}}",
															"description": "(Required) User id in path"
														}
													]
												},
												"description": "User interests defined by categories"
											},
											"response": [
												{
													"name": "Successful response with user interest objects",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/users/:id/interests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":id",
																"interests"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"user\": {\n      \"id\": \"<integer>\",\n      \"email\": \"<string>\"\n    },\n    \"category\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"icon\": \"<string>\"\n    }\n  },\n  {\n    \"id\": \"<integer>\",\n    \"user\": {\n      \"id\": \"<integer>\",\n      \"email\": \"<string>\"\n    },\n    \"category\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"icon\": \"<string>\"\n    }\n  }\n]"
												},
												{
													"name": "Request could not be validated",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/users/:id/interests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":id",
																"interests"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
												},
												{
													"name": "Client is not authorized to make request",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/users/:id/interests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":id",
																"interests"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
												},
												{
													"name": "Client is forbidden from making this request",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/users/:id/interests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":id",
																"interests"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
												},
												{
													"name": "Internal Server Error",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/users/:id/interests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":id",
																"interests"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
												}
											]
										},
										{
											"name": "Bad Request - updating a category that does not exist",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 404 not found\", function() {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"// Test for expected content type",
															"pm.test(\"Content-Type header is application/json\", function() {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"});",
															"",
															"const responseBody = pm.response.json();",
															"",
															"// Test that response body contains message and it's not empty",
															"pm.test(\"Response contains proper message\", function() {",
															"    pm.expect(responseBody).to.have.property(\"message\");",
															"    pm.expect(responseBody.message).to.not.be.null;",
															"    pm.expect(responseBody.message).to.not.be.undefined;",
															"    pm.expect(responseBody.message.toLowerCase()).to.include('CATEGORY not found');",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"interests\": [\n    45600\n  ]\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/:id/interests",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														":id",
														"interests"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{userId}}",
															"description": "(Required) User id in path"
														}
													]
												},
												"description": "Save user's content category preferences"
											},
											"response": [
												{
													"name": "Successful request with no content",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"interests\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/users/:id/interests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":id",
																"interests"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Request could not be validated",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"interests\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/users/:id/interests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":id",
																"interests"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
												},
												{
													"name": "Client is not authorized to make request",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"interests\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/users/:id/interests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":id",
																"interests"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
												},
												{
													"name": "Client is forbidden from making this request",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"interests\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/users/:id/interests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":id",
																"interests"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
												},
												{
													"name": "Internal Server Error",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"interests\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/users/:id/interests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":id",
																"interests"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
												}
											]
										},
										{
											"name": "Unauthorized - Save category for a user you are not logged in as",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 403\", function() {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"// Test for expected content type",
															"pm.test(\"Content-Type header is application/json\", function() {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"});",
															"",
															"const responseBody = pm.response.json();",
															"",
															"// Test that response body contains message and it's not empty",
															"pm.test(\"Response contains proper message\", function() {",
															"    pm.expect(responseBody).to.have.property(\"message\");",
															"    pm.expect(responseBody.message).to.not.be.null;",
															"    pm.expect(responseBody.message).to.not.be.undefined;",
															"    pm.expect(responseBody.message.toLowerCase()).to.include('not authorized');",
															"});",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"interests\": [\n    456\n  ]\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/users/:id/interests",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"users",
														":id",
														"interests"
													],
													"variable": [
														{
															"key": "id",
															"value": "1000000000",
															"description": "(Required) User id in path"
														}
													]
												},
												"description": "Save user's content category preferences"
											},
											"response": [
												{
													"name": "Successful request with no content",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"interests\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/users/:id/interests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":id",
																"interests"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Request could not be validated",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"interests\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/users/:id/interests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":id",
																"interests"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
												},
												{
													"name": "Client is not authorized to make request",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"interests\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/users/:id/interests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":id",
																"interests"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
												},
												{
													"name": "Client is forbidden from making this request",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"interests\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/users/:id/interests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":id",
																"interests"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
												},
												{
													"name": "Internal Server Error",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"interests\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/users/:id/interests",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"users",
																":id",
																"interests"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"error\": \"<string>\",\n  \"message\": \"<string>\",\n  \"data\": {}\n}"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Test for response time",
					"pm.test(\"Response time is less than 2000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://breach-api.qa.mvm-tech.xyz"
		},
		{
			"key": "uniqueEmail",
			"value": ""
		},
		{
			"key": "usedEmail",
			"value": "test@example.com",
			"type": "string"
		},
		{
			"key": "email",
			"value": "",
			"type": "string"
		},
		{
			"key": "password",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "categoryId",
			"value": "1",
			"type": "string"
		}
	]
}